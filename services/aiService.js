const OpenAI = require('openai');
const config = require('../config/config.js');
const logger = require('../utils/logger.js');

class AIService {
    constructor() {
        this.openai = null;
        this.initialized = false;
        this.init();
    }

    init() {
        if (config.OPENAI_API_KEY && config.OPENAI_API_KEY !== '') {
            try {
                this.openai = new OpenAI({
                    apiKey: config.OPENAI_API_KEY
                });
                this.initialized = true;
                logger.info('ü§ñ AI Service initialized successfully');
            } catch (error) {
                logger.error('‚ùå Failed to initialize AI Service:', error);
                this.initialized = false;
            }
        } else {
            logger.warn('‚ö†Ô∏è OpenAI API key not provided, AI features disabled');
            this.initialized = false;
        }
    }

    isReady() {
        return this.initialized && this.openai !== null;
    }

    async chat(message, userId = null, username = null) {
        if (!this.isReady()) {
            return {
                success: false,
                error: 'AI Service ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m OpenAI API key.'
            };
        }

        try {
            const systemPrompt = config.SYSTEM_PROMPT || 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI cho c·ªông ƒë·ªìng Geometry Dash Vi·ªát Nam. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† gi√∫p ƒë·ª° ng∆∞·ªùi ch∆°i v·ªÅ game Geometry Dash.';
            
            const messages = [
                {
                    role: 'system',
                    content: systemPrompt
                },
                {
                    role: 'user',
                    content: message
                }
            ];

            const completion = await this.openai.chat.completions.create({
                model: config.AI_MODEL || 'gpt-3.5-turbo',
                messages: messages,
                max_tokens: 1000,
                temperature: 0.7,
            });

            const response = completion.choices[0]?.message?.content;
            
            if (!response) {
                throw new Error('No response from AI');
            }

            // Log the interaction
            logger.info(`ü§ñ AI Chat - User: ${username || userId} | Tokens: ${completion.usage.total_tokens}`);

            return {
                success: true,
                response: response,
                tokens_used: completion.usage.total_tokens
            };

        } catch (error) {
            logger.error('‚ùå AI Chat error:', error);
            
            // Handle specific OpenAI error types with detailed Vietnamese messages
            if (error.code === 'insufficient_quota' || error.status === 429) {
                return {
                    success: false,
                    error: 'üí≥ **H·∫øt quota OpenAI API**\n\nT√†i kho·∫£n OpenAI c·ªßa b·∫°n ƒë√£ h·∫øt credit ho·∫∑c v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng.\n\nüìã **C√°ch kh·∫Øc ph·ª•c:**\n‚Ä¢ Ki·ªÉm tra billing t·∫°i: https://platform.openai.com/usage\n‚Ä¢ Th√™m payment method ho·∫∑c n√¢ng c·∫•p plan\n‚Ä¢ ƒê·ª£i reset quota h√†ng th√°ng\n\nüí° Bot v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng v·ªõi c√°c l·ªánh kh√°c!'
                };
            } else if (error.code === 'invalid_api_key' || error.status === 401) {
                return {
                    success: false,
                    error: 'üîë **API Key kh√¥ng h·ª£p l·ªá**\n\nOpenAI API key c√≥ v·∫•n ƒë·ªÅ.\n\nüìã **C√°ch kh·∫Øc ph·ª•c:**\n‚Ä¢ Ki·ªÉm tra API key t·∫°i: https://platform.openai.com/api-keys\n‚Ä¢ T·∫°o API key m·ªõi n·∫øu c·∫ßn\n‚Ä¢ Li√™n h·ªá admin ƒë·ªÉ c·∫≠p nh·∫≠t'
                };
            } else if (error.status === 503 || error.status === 500) {
                return {
                    success: false,
                    error: 'üîß **OpenAI ƒëang b·∫£o tr√¨**\n\nD·ªãch v·ª• OpenAI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.\nVui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'
                };
            } else {
                return {
                    success: false,
                    error: `‚ùå **L·ªói AI kh√¥ng x√°c ƒë·ªãnh**\n\n${error.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI service'}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin.`
                };
            }
        }
    }

    // Reinitialize with new API key
    updateApiKey(newApiKey) {
        config.OPENAI_API_KEY = newApiKey;
        process.env.OPENAI_API_KEY = newApiKey;
        this.init();
    }

    // Update model
    updateModel(newModel) {
        config.AI_MODEL = newModel;
        process.env.AI_MODEL = newModel;
        logger.info(`üîÑ AI model updated to: ${newModel}`);
    }

    // Update system prompt
    updateSystemPrompt(newPrompt) {
        config.SYSTEM_PROMPT = newPrompt;
        process.env.SYSTEM_PROMPT = newPrompt;
        logger.info('üîÑ System prompt updated');
    }
}

module.exports = new AIService();