const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const aiService = require('../services/aiService.js');
const localAI = require('../services/localAI.js');
const config = require('../config/config.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ask')
        .setDescription('H·ªèi AI v·ªÅ Geometry Dash ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨')
        .addStringOption(option =>
            option.setName('question')
                .setDescription('C√¢u h·ªèi b·∫°n mu·ªën h·ªèi AI')
                .setRequired(true)
        ),

    async execute(interaction) {
        const question = interaction.options.getString('question');
        const userId = interaction.user.id;
        const username = interaction.user.username;

        // Defer reply since AI might take time
        await interaction.deferReply();

        try {
            // Try OpenAI first, fallback to local AI if not available
            let result;
            let isLocalAI = false;

            if (aiService.isReady()) {
                // Get AI response with enhanced prompt for Geometry Dash
                const enhancedPrompt = `C√¢u h·ªèi v·ªÅ Geometry Dash t·ª´ c·ªông ƒë·ªìng Vi·ªát Nam: ${question}`;
                result = await aiService.chat(enhancedPrompt, userId, username);
            } else {
                // Use local AI as fallback
                result = await localAI.processQuestion(question);
                isLocalAI = true;
            }

            if (!result.success) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói AI')
                    .setDescription(result.error)
                    .setColor(config.COLORS.ERROR)
                    .setTimestamp();

                return interaction.editReply({ embeds: [errorEmbed] });
            }

            // Create response embed
            const responseEmbed = new EmbedBuilder()
                .setTitle(isLocalAI ? 'üß† GDVN Local AI' : 'ü§ñ GDVN AI Assistant')
                .setDescription(result.response)
                .setColor(config.COLORS.PRIMARY)
                .addFields(
                    {
                        name: '‚ùì C√¢u h·ªèi',
                        value: question.length > 100 ? question.substring(0, 100) + '...' : question,
                        inline: false
                    },
                    {
                        name: 'üë§ Ng∆∞·ªùi h·ªèi',
                        value: `${interaction.user.displayName}`,
                        inline: true
                    },
                    {
                        name: 'üîß AI Type',
                        value: isLocalAI ? 'üß† Local Knowledge Base' : (config.AI_MODEL || 'gpt-3.5-turbo'),
                        inline: true
                    },
                    {
                        name: 'üìä Status',
                        value: isLocalAI ? 'üÜì Free & Local' : `Tokens: ${result.tokens_used || 'N/A'}`,
                        inline: true
                    }
                )
                .setFooter({
                    text: isLocalAI ? 'GDVN Local AI ‚Ä¢ Free Vietnamese GD Knowledge' : 'GDVN AI ‚Ä¢ Powered by OpenAI ‚Ä¢ H·ªó tr·ª£ c·ªông ƒë·ªìng GD Vi·ªát Nam',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();

            await interaction.editReply({ embeds: [responseEmbed] });

        } catch (error) {
            console.error('Ask command error:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói H·ªá Th·ªëng')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n.')
                .setColor(config.COLORS.ERROR)
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};