const { EmbedBuilder, SlashCommandBuilder } = require('discord.js');
const geometryDashAPI = require('../services/geometryDashAPI.js');
const vietnamese = require('../utils/vietnamese.js');
const config = require('../config/config.js');
const logger = require('../utils/logger.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('search')
        .setDescription('T√¨m ki·∫øm level Geometry Dash theo t√™n')
        .addStringOption(option =>
            option.setName('name')
                .setDescription('T√™n level c·∫ßn t√¨m')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('limit')
                .setDescription('S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa (1-10)')
                .setMinValue(1)
                .setMaxValue(10)),

    async execute(interaction) {
        await interaction.deferReply();

        const levelName = interaction.options.getString('name');
        const limit = interaction.options.getInteger('limit') || 5;

        try {
            const searchResults = await geometryDashAPI.searchLevels(levelName, limit);

            if (!searchResults || searchResults.length === 0) {
                const errorEmbed = new EmbedBuilder()
                    .setColor(config.COLORS.WARNING)
                    .setTitle('üîç Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£')
                    .setDescription(`Kh√¥ng t√¨m th·∫•y level n√†o v·ªõi t√™n: "${levelName}"`)
                    .setTimestamp();

                return await interaction.editReply({ embeds: [errorEmbed] });
            }

            const searchEmbed = new EmbedBuilder()
                .setColor(config.COLORS.PRIMARY)
                .setTitle(`üîç K·∫øt qu·∫£ t√¨m ki·∫øm: "${levelName}"`)
                .setDescription(`T√¨m th·∫•y ${searchResults.length} k·∫øt qu·∫£:`)
                .setTimestamp();

            searchResults.forEach((level, index) => {
                const difficultyIcon = vietnamese.getDifficultyIcon(level.difficulty);
                const fieldValue = [
                    `üë§ **T√°c gi·∫£:** ${level.author || 'Kh√¥ng r√µ'}`,
                    `üÜî **ID:** ${level.id}`,
                    `‚≠ê **ƒê·ªô kh√≥:** ${difficultyIcon} ${vietnamese.getDifficultyName(level.difficulty)}`,
                    `üìä **L∆∞·ª£t t·∫£i:** ${level.downloads ? level.downloads.toLocaleString('vi-VN') : '0'}`,
                    `üëç **L∆∞·ª£t th√≠ch:** ${level.likes ? level.likes.toLocaleString('vi-VN') : '0'}`
                ].join('\n');

                searchEmbed.addFields({
                    name: `${index + 1}. ${level.name}`,
                    value: fieldValue,
                    inline: false
                });
            });

            searchEmbed.setFooter({ 
                text: `GDVN Bot ‚Ä¢ Trang 1/${Math.ceil(searchResults.length / limit)} ‚Ä¢ S·ª≠ d·ª•ng /level <id> ƒë·ªÉ xem chi ti·∫øt` 
            });

            await interaction.editReply({ embeds: [searchEmbed] });
            logger.info(`Level search completed for query: "${levelName}" by user: ${interaction.user.tag}`);

        } catch (error) {
            logger.error('Error in search command:', error);

            const errorEmbed = new EmbedBuilder()
                .setColor(config.COLORS.ERROR)
                .setTitle('‚ùå L·ªói')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm level. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};
