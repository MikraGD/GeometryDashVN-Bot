const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const config = require('../config/config.js');
const dbUtils = require('../utils/database.js');
const logger = require('../utils/logger.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('stats')
        .setDescription('Xem th·ªëng k√™ s·ª≠ d·ª•ng bot')
        .addSubcommand(subcommand =>
            subcommand
                .setName('user')
                .setDescription('Xem th·ªëng k√™ c√° nh√¢n')
                .addUserOption(option =>
                    option.setName('target')
                        .setDescription('Ng∆∞·ªùi d√πng mu·ªën xem th·ªëng k√™ (ƒë·ªÉ tr·ªëng ƒë·ªÉ xem c·ªßa b·∫£n th√¢n)')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('server')
                .setDescription('Xem th·ªëng k√™ server (ch·ªâ admin)')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('commands')
                .setDescription('Xem th·ªëng k√™ l·ªánh ph·ªï bi·∫øn')
        ),

    async execute(interaction) {
        const startTime = Date.now();
        const subcommand = interaction.options.getSubcommand();

        try {
            await interaction.deferReply();

            if (subcommand === 'user') {
                const targetUser = interaction.options.getUser('target') || interaction.user;
                const userStats = await dbUtils.getUserStats(targetUser.id);

                const embed = new EmbedBuilder()
                    .setTitle('üìä Th·ªëng k√™ ng∆∞·ªùi d√πng')
                    .setDescription(`Th·ªëng k√™ cho ${targetUser.displayName}`)
                    .addFields(
                        {
                            name: 'üéÆ L·ªánh ƒë√£ s·ª≠ d·ª•ng',
                            value: `${userStats.commandsUsed} l·ªánh`,
                            inline: true
                        },
                        {
                            name: 'üëÅÔ∏è L·∫ßn cu·ªëi online',
                            value: userStats.lastSeen ? 
                                `<t:${Math.floor(userStats.lastSeen.getTime() / 1000)}:R>` : 
                                'Ch∆∞a c√≥ d·ªØ li·ªáu',
                            inline: true
                        }
                    )
                    .setColor(config.COLORS.INFO)
                    .setThumbnail(targetUser.displayAvatarURL())
                    .setTimestamp();

                await interaction.editReply({ embeds: [embed] });

            } else if (subcommand === 'server') {
                if (!interaction.guild) {
                    return interaction.editReply('‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server.');
                }

                const commandStats = await dbUtils.getCommandStats(interaction.guild.id);
                const moderationLogs = await dbUtils.getModerationLogs(interaction.guild.id, 5);

                const embed = new EmbedBuilder()
                    .setTitle('üìä Th·ªëng k√™ Server')
                    .setDescription(`Th·ªëng k√™ cho **${interaction.guild.name}**`)
                    .addFields(
                        {
                            name: 'üë• Th√†nh vi√™n',
                            value: `${interaction.guild.memberCount} ng∆∞·ªùi`,
                            inline: true
                        },
                        {
                            name: 'ü§ñ Bot ho·∫°t ƒë·ªông',
                            value: `${commandStats.length > 0 ? 'C√≥ d·ªØ li·ªáu' : 'Ch∆∞a c√≥ d·ªØ li·ªáu'}`,
                            inline: true
                        }
                    )
                    .setColor(config.COLORS.PRIMARY)
                    .setThumbnail(interaction.guild.iconURL())
                    .setTimestamp();

                if (commandStats.length > 0) {
                    const topCommands = commandStats.slice(0, 5).map(stat => 
                        `\`/${stat.commandName}\` - ${stat.count} l·∫ßn (${Math.round(stat.successRate)}% th√†nh c√¥ng)`
                    ).join('\n');

                    embed.addFields({
                        name: 'üéØ Top 5 l·ªánh ph·ªï bi·∫øn',
                        value: topCommands,
                        inline: false
                    });
                }

                if (moderationLogs.length > 0) {
                    const recentMods = moderationLogs.slice(0, 3).map(log => 
                        `**${log.action}** - <t:${Math.floor(new Date(log.createdAt).getTime() / 1000)}:R>`
                    ).join('\n');

                    embed.addFields({
                        name: 'üõ°Ô∏è Ho·∫°t ƒë·ªông moderation g·∫ßn ƒë√¢y',
                        value: recentMods,
                        inline: false
                    });
                }

                await interaction.editReply({ embeds: [embed] });

            } else if (subcommand === 'commands') {
                const commandStats = await dbUtils.getCommandStats(interaction.guild?.id);

                if (commandStats.length === 0) {
                    return interaction.editReply('üìä Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ l·ªánh.');
                }

                const embed = new EmbedBuilder()
                    .setTitle('üìà Th·ªëng k√™ l·ªánh')
                    .setDescription('L·ªánh ph·ªï bi·∫øn v√† hi·ªáu su·∫•t')
                    .setColor(config.COLORS.SUCCESS)
                    .setTimestamp();

                const commandList = commandStats.slice(0, 10).map((stat, index) => {
                    const avgTime = stat.avgExecutionTime ? `${Math.round(stat.avgExecutionTime)}ms` : 'N/A';
                    return `**${index + 1}.** \`/${stat.commandName}\`\n` +
                           `‚îî ${stat.count} l·∫ßn ‚Ä¢ ${Math.round(stat.successRate)}% th√†nh c√¥ng ‚Ä¢ ${avgTime}`;
                }).join('\n\n');

                embed.addFields({
                    name: 'üìä Top l·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng',
                    value: commandList,
                    inline: false
                });

                await interaction.editReply({ embeds: [embed] });
            }

            // Log command usage
            const executionTime = Date.now() - startTime;
            await dbUtils.logCommand(interaction, 'stats', true, executionTime);

        } catch (error) {
            logger.error('‚ùå Stats command error:', error);
            
            const executionTime = Date.now() - startTime;
            await dbUtils.logCommand(interaction, 'stats', false, executionTime, error.message);

            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói H·ªá Th·ªëng')
                .setDescription('Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .setColor(config.COLORS.ERROR)
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};